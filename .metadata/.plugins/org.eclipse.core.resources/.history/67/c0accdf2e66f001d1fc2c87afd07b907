package com.kodlamaio.inventorySerivece.business.concrete;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.kodlamaio.commen.utilities.excaptions.BusinessException;
import com.kodlamaio.commen.utilities.mapping.ModelMapperService;
import com.kodlamaio.inventorySerivece.business.abstracts.ModelService;
import com.kodlamaio.inventorySerivece.business.requests.create.CreateModelRequest;
import com.kodlamaio.inventorySerivece.business.requests.update.UpdateModelRequest;
import com.kodlamaio.inventorySerivece.business.responses.create.CreateCarResponse;
import com.kodlamaio.inventorySerivece.business.responses.create.CreateModelResponse;
import com.kodlamaio.inventorySerivece.business.responses.get.GetAllModelResponse;
import com.kodlamaio.inventorySerivece.business.responses.update.UpdateCarResponse;
import com.kodlamaio.inventorySerivece.business.responses.update.UpdateModelResponse;
import com.kodlamaio.inventorySerivece.dataAccess.ModelRepository;
import com.kodlamaio.inventorySerivece.entities.Car;
import com.kodlamaio.inventorySerivece.entities.Model;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class ModelManager implements ModelService {

	private ModelMapperService modelMapperService;
	private ModelRepository modelRepository;
	@Override
	public List<GetAllModelResponse> getAll() {
		List<Model> models = this.modelRepository.findAll();

		List<GetAllModelResponse> response = models.stream()
				.map(model -> this.modelMapperService.forResponse().map(model, GetAllModelResponse.class))
				.collect(Collectors.toList());

		return response;
	}

	@Override
	public CreateModelResponse add(CreateModelRequest createModelRequest) {
		Model model=this.modelMapperService.forRequest().map(createModelRequest,Model.class);
		modelRepository.save(model);
		CreateModelResponse modelResponse=
				this.modelMapperService.forResponse().map(model, CreateModelResponse.class);
		return modelResponse;
	}

	@Override
	public UpdateModelResponse updateModelResponse(UpdateModelRequest updateModelRequest) {
		checkIfModelExistsById(updateModelRequest.getId());
		Model model=this.modelMapperService.forRequest().map(updateModelRequest,Model.class);
		modelRepository.save(model);
		UpdateModelResponse modelResponse=
				this.modelMapperService.forResponse().map(model, UpdateModelResponse.class);
		return modelResponse;
	}
	@Override
	public void delete(String id) {
		this.modelRepository.deleteById(id);
		
	}
	private void checkIfModelExistsById(String id) {
		Model currentModel = this.modelRepository.findById(id).orElse(null);
				if (currentModel != null) { 
			throw new BusinessException("Model not.EXISTS");
		}
	}

}
